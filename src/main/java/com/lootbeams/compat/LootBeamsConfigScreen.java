package com.lootbeams.compat;

import com.lootbeams.LootBeams;
import me.shedaniel.clothconfig2.api.ConfigBuilder;
import net.minecraft.client.gui.screen.Screen;
import net.minecraft.text.Text;

import java.util.ArrayList;

public class LootBeamsConfigScreen {
    public static Screen getConfigScreen(Screen parent){
        ConfigBuilder builder = ConfigBuilder.create();
        if (parent != null) builder.setParentScreen(parent);
        builder.setTitle(Text.translatable("lootbeams.title"));
        var main = builder.getOrCreateCategory(Text.translatable("lootbeams.config.main"));
        main.addEntry(builder.entryBuilder().startBooleanToggle(Text.translatable("lootbeams.config.main.renderNameColor"), LootBeams.config.renderNameColor)
                        .setDefaultValue(true)
                        .setSaveConsumer(flag -> LootBeams.config.renderNameColor = flag)
                        .setTooltip(Text.translatable("lootbeams.config.main.renderNameColor.description"))
                .build())
                .addEntry(builder.entryBuilder().startBooleanToggle(Text.translatable("lootbeams.config.main.renderRarityColor"), LootBeams.config.renderRarityColor)
                        .setDefaultValue(true)
                        .setSaveConsumer(flag -> LootBeams.config.renderRarityColor = flag)
                        .setTooltip(Text.translatable("lootbeams.config.main.enderRarityColor.description"))
                        .build())
                .addEntry(builder.entryBuilder().startFloatField(Text.translatable("lootbeams.config.main.beamRadius"), LootBeams.config.beamRadius)
                        .setDefaultValue(1)
                        .setMin(0)
                        .setMax(5)
                        .setSaveConsumer(value -> LootBeams.config.beamRadius = value)
                        .setTooltip(Text.translatable("lootbeams.config.main.beamRadius.description"))
                        .build())
                .addEntry(builder.entryBuilder().startFloatField(Text.translatable("lootbeams.config.main.beamHeight"), LootBeams.config.beamHeight)
                        .setDefaultValue(1)
                        .setMin(0)
                        .setMax(256)
                        .setSaveConsumer(value -> LootBeams.config.beamHeight = value)
                        .setTooltip(Text.translatable("lootbeams.config.main.beamHeight.description"))
                        .build())
                .addEntry(builder.entryBuilder().startFloatField(Text.translatable("lootbeams.config.main.beamYOffset"), LootBeams.config.beamYOffset)
                        .setDefaultValue(0)
                        .setMin(-30)
                        .setMax(30)
                        .setSaveConsumer(value -> LootBeams.config.beamYOffset = value)
                        .setTooltip(Text.translatable("lootbeams.config.main.beamYOffset.description"))
                        .build())
                .addEntry(builder.entryBuilder().startFloatField(Text.translatable("lootbeams.config.main.beamAlpha"), LootBeams.config.beamAlpha)
                        .setDefaultValue(0.85f)
                        .setMin(0)
                        .setMax(1)
                        .setSaveConsumer(value -> LootBeams.config.beamAlpha = value)
                        .setTooltip(Text.translatable("lootbeams.config.main.beamAlpha.description"))
                        .build())
                .addEntry(builder.entryBuilder().startFloatField(Text.translatable("lootbeams.config.main.beamRenderDistance"), LootBeams.config.renderDistance)
                        .setDefaultValue(120)
                        .setMin(0)
                        .setMax(120)
                        .setSaveConsumer(value -> LootBeams.config.renderDistance = value)
                        .setTooltip(Text.translatable("lootbeams.config.main.beamRenderDistance.description"))
                        .build())
                .addEntry(builder.entryBuilder().startFloatField(Text.translatable("lootbeams.config.main.beamFadeDistance"), LootBeams.config.fadeDistance)
                        .setDefaultValue(2)
                        .setMin(0)
                        .setMax(120)
                        .setSaveConsumer(value -> LootBeams.config.fadeDistance = value)
                        .setTooltip(Text.translatable("lootbeams.config.main.beamFadeDistance.description"))
                        .build())
                .addEntry(builder.entryBuilder().startStrList(Text.translatable("lootbeams.config.main.colorOverrides"), LootBeams.config.colorOverrides)
                        .setDefaultValue(new ArrayList<>())
                        .setSaveConsumer(value -> LootBeams.config.colorOverrides = value)
                        .setTooltip(Text.translatable("lootbeams.config.main.colorOverrides.description"))
                        .build());
        var items = builder.getOrCreateCategory(Text.translatable("lootbeams.config.items"));
        items.addEntry(builder.entryBuilder().startBooleanToggle(Text.translatable("lootbeams.config.item.allItems"), LootBeams.config.allItems)
                        .setDefaultValue(true)
                        .setSaveConsumer(flag -> LootBeams.config.allItems = flag)
                        .setTooltip(Text.translatable("lootbeams.config.item.allItems.description"))
                .build())
                .addEntry(builder.entryBuilder().startBooleanToggle(Text.translatable("lootbeams.config.item.onlyRare"), LootBeams.config.onlyRare)
                        .setDefaultValue(false)
                        .setSaveConsumer(flag -> LootBeams.config.onlyRare = flag)
                        .setTooltip(Text.translatable("lootbeams.config.item.onlyRare.description"))
                        .build())
                .addEntry(builder.entryBuilder().startBooleanToggle(Text.translatable("lootbeams.config.item.onlyEquipment"), LootBeams.config.onlyEquipment)
                        .setDefaultValue(false)
                        .setSaveConsumer(flag -> LootBeams.config.onlyEquipment = flag)
                        .setTooltip(Text.translatable("lootbeams.config.item.onlyEquipment.description"))
                        .build())
                .addEntry(builder.entryBuilder().startStrList(Text.translatable("lootbeams.config.item.whitelist"), LootBeams.config.whitelist)
                        .setDefaultValue(new ArrayList<>())
                        .setSaveConsumer(value -> LootBeams.config.whitelist = value)
                        .setTooltip(Text.translatable("lootbeams.config.item.whitelist.description"))
                        .build())
                .addEntry(builder.entryBuilder().startStrList(Text.translatable("lootbeams.config.item.blacklist"), LootBeams.config.blacklist)
                        .setDefaultValue(new ArrayList<>())
                        .setSaveConsumer(value -> LootBeams.config.blacklist = value)
                        .setTooltip(Text.translatable("lootbeams.config.item.blacklist.description"))
                        .build());
        var nametags = builder.getOrCreateCategory(Text.translatable("lootbeams.config.nametags"));
        nametags.addEntry(builder.entryBuilder().startBooleanToggle(Text.translatable("lootbeams.config.nametags.borders"), LootBeams.config.borders)
                        .setDefaultValue(true)
                        .setSaveConsumer(value -> LootBeams.config.borders = value)
                        .setTooltip(Text.translatable("lootbeams.config.nametags.borders.description"))
                        .build())
                .addEntry(builder.entryBuilder().startBooleanToggle(Text.translatable("lootbeams.config.nametags.render"), LootBeams.config.renderNametags)
                        .setDefaultValue(true)
                        .setSaveConsumer(value -> LootBeams.config.renderNametags = value)
                        .setTooltip(Text.translatable("lootbeams.config.nametags.render.description"))
                        .build())
                .addEntry(builder.entryBuilder().startBooleanToggle(Text.translatable("lootbeams.config.nametags.renderOnlook"), LootBeams.config.renderNametagsOnlook)
                        .setDefaultValue(true)
                        .setSaveConsumer(value -> LootBeams.config.renderNametagsOnlook = value)
                        .setTooltip(Text.translatable("lootbeams.config.nametags.renderOnlook.description"))
                        .build())
                .addEntry(builder.entryBuilder().startBooleanToggle(Text.translatable("lootbeams.config.nametags.renderStackCount"), LootBeams.config.renderStackcount)
                        .setDefaultValue(true)
                        .setSaveConsumer(value -> LootBeams.config.renderStackcount = value)
                        .setTooltip(Text.translatable("lootbeams.config.nametags.renderStackCount.description"))
                        .build())
                .addEntry(builder.entryBuilder().startFloatField(Text.translatable("lootbeams.config.nametags.lookSensitivity"), LootBeams.config.nametagLookSensitivity)
                        .setDefaultValue(0.018f)
                        .setMin(0)
                        .setMax(5)
                        .setSaveConsumer(value -> LootBeams.config.nametagLookSensitivity = value)
                        .setTooltip(Text.translatable("lootbeams.config.nametags.lookSensitivity.description"))
                        .build())
                .addEntry(builder.entryBuilder().startFloatField(Text.translatable("lootbeams.config.nametags.textAlpha"), LootBeams.config.nametagTextAlpha)
                        .setDefaultValue(1)
                        .setMin(0)
                        .setMax(1)
                        .setSaveConsumer(value -> LootBeams.config.nametagTextAlpha = value)
                        .setTooltip(Text.translatable("lootbeams.config.nametags.textAlpha.description"))
                        .build())
                .addEntry(builder.entryBuilder().startFloatField(Text.translatable("lootbeams.config.nametags.backgroundAlpha"), LootBeams.config.nametagBackgroundAlpha)
                        .setDefaultValue(0.5f)
                        .setMin(0)
                        .setMax(1)
                        .setSaveConsumer(value -> LootBeams.config.nametagBackgroundAlpha = value)
                        .setTooltip(Text.translatable("lootbeams.config.nametags.backgroundAlpha.description"))
                        .build())
                .addEntry(builder.entryBuilder().startFloatField(Text.translatable("lootbeams.config.nametags.scale"), LootBeams.config.nametagScale)
                        .setDefaultValue(1)
                        .setMin(-10)
                        .setMax(10)
                        .setSaveConsumer(value -> LootBeams.config.nametagScale = value)
                        .setTooltip(Text.translatable("lootbeams.config.nametags.scale.description"))
                        .build())
                .addEntry(builder.entryBuilder().startFloatField(Text.translatable("lootbeams.config.nametags.yOffset"), LootBeams.config.nametagYOffset)
                        .setDefaultValue(0.75f)
                        .setMin(-30)
                        .setMax(30)
                        .setSaveConsumer(value -> LootBeams.config.nametagYOffset = value)
                        .setTooltip(Text.translatable("lootbeams.config.nametags.yOffset.description"))
                        .build())
                // No DMC Loot available on fabric (yet)
                //.addEntry(builder.entryBuilder().startBooleanToggle(Text.translatable("lootbeams.config.nametags.dmcLootCompat.rarities"), LootBeams.config.dmclootCompatRarity)
                //        .setDefaultValue(true)
                //        .setSaveConsumer(value -> LootBeams.config.dmclootCompatRarity = value)
                //        .setTooltip(Text.translatable("lootbeams.config.nametags.dmcLootCompat.rarities.description"))
                //        .build())
                .addEntry(builder.entryBuilder().startStrList(Text.translatable("lootbeams.config.nametags.rarities"), LootBeams.config.customRarities)
                        .setDefaultValue(new ArrayList<>())
                        .setSaveConsumer(value -> LootBeams.config.customRarities = value)
                        .setTooltip(Text.translatable("lootbeams.config.nametags.rarities.description"))
                        .build())
                .addEntry(builder.entryBuilder().startStrList(Text.translatable("lootbeams.config.nametags.alwaysDrawRarities"), LootBeams.config.alwaysDrawRaritiesOn)
                        .setDefaultValue(new ArrayList<>())
                        .setSaveConsumer(value -> LootBeams.config.alwaysDrawRaritiesOn = value)
                        .setTooltip(Text.translatable("lootbeams.config.nametags.alwaysDrawRarities.description"))
                        .build())
                .addEntry(builder.entryBuilder().startBooleanToggle(Text.translatable("lootbeams.config.nametags.whiteRarities"), LootBeams.config.whiteRarities)
                        .setDefaultValue(false)
                        .setSaveConsumer(value -> LootBeams.config.whiteRarities = value)
                        .setTooltip(Text.translatable("lootbeams.config.nametags.whiteRarities.description"))
                        .build());
        builder.setSavingRunnable(() -> LootBeams.config.save());
        return builder.build();
    }
}
